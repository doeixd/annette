name: Publish Package and Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This is important for getting all tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Find built files
        id: find_files
        run: |
          # Find CJS file with robust pattern matching
          CJS_FILE=""
          if [ -d "dist" ]; then
            # Try to find CJS files with various patterns
            CJS_FILE=$(find dist \( -name "*.cjs.js" -o -name "index.cjs.js" -o -path "*/cjs/*" -name "index.js" \) 2>/dev/null | head -n 1 || echo "")
            if [ -z "$CJS_FILE" ]; then
              CJS_FILE=$(find dist -name "index.js" -exec grep -l "CommonJS\|require(" {} \; 2>/dev/null | head -n 1 || echo "")
            fi
          fi

          # Find ESM file with robust pattern matching
          ESM_FILE=""
          if [ -d "dist" ]; then
            # Try to find ESM files with various patterns
            ESM_FILE=$(find dist \( -name "*.esm.js" -o -name "index.esm.js" -o -path "*/esm/*" -name "index.js" \) 2>/dev/null | head -n 1 || echo "")
            if [ -z "$ESM_FILE" ]; then
              ESM_FILE=$(find dist -name "index.js" -exec grep -l "export\|import.*from" {} \; 2>/dev/null | head -n 1 || echo "")
            fi
          fi

          # Find TypeScript declaration file
          TYPES_FILE=""
          if [ -d "dist" ]; then
            TYPES_FILE=$(find dist -name "index.d.ts" 2>/dev/null | head -n 1 || echo "")
            if [ -z "$TYPES_FILE" ]; then
              TYPES_FILE=$(find dist -name "*.d.ts" 2>/dev/null | head -n 1 || echo "")
            fi
          fi

          # Ensure we have deterministic output (empty string if not found)
          CJS_FILE="${CJS_FILE:-}"
          ESM_FILE="${ESM_FILE:-}"
          TYPES_FILE="${TYPES_FILE:-}"

          echo "CJS file: '$CJS_FILE'"
          echo "ESM file: '$ESM_FILE'"
          echo "Types file: '$TYPES_FILE'"

          # Always write to GITHUB_OUTPUT, even if empty
          {
            echo "cjs_file=$CJS_FILE"
            echo "esm_file=$ESM_FILE"
            echo "types_file=$TYPES_FILE"
          } >> $GITHUB_OUTPUT

      - name: Check package version and publish
        run: |
          # Extract package name and version from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "Package: $PACKAGE_NAME"
          echo "Version: $PACKAGE_VERSION"

          # Check if version already exists in registry
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already exists in registry. Skipping publish."
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist. Publishing..."
            echo "version_exists=false" >> $GITHUB_OUTPUT

            # Publish with provenance and public access
            npm publish --access public --provenance
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get Changelog Entry
        id: get_changelog
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          CHANGELOG_ENTRY=$(awk "/^## \[$VERSION\]/ {flag=1;next} /^## \[/ {flag=0} flag" CHANGELOG.md)
          CHANGELOG_ENTRY="${CHANGELOG_ENTRY//'%'/'%25'}"
          CHANGELOG_ENTRY="${CHANGELOG_ENTRY//$'\n'/'%0A'}"
          CHANGELOG_ENTRY="${CHANGELOG_ENTRY//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.get_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload CJS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.cjs_file }}
          asset_name: index.cjs.js
          asset_content_type: application/javascript

      - name: Upload ESM Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.esm_file }}
          asset_name: index.esm.js
          asset_content_type: application/javascript

      - name: Upload Types Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.types_file }}
          asset_name: index.d.ts
          asset_content_type: application/typescript